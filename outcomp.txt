< previous, > current
/home/earl/gforth-mma2/example.fs
/home/earl/gforth-mma2/link.fs
24,38d23
< : link-get-id ( link -- id )
<     0w@
< ;
< 
< : link-set-id ( link -- )
<     link-id swap 0w!
< ;
< 
< : link-get-use-count ( link -- u-uc )
<     1w@
< ;
< 
< : link-set-use-count ( u-16 link -- )
<     1w!
< ;
69c54
<     link-get-id \ Here the fetch could abort on an invalid address, like a random number.
---
>     struct-get-id   \ Here the fetch could abort on an invalid address, like a random number.
77,88d61
< : link-dec-use-count ( link-addr -- )
<     dup link-get-use-count      \ link-addr use-count
<     1-
<     swap link-set-use-count
< ;
< 
< : link-inc-use-count ( link-addr -- )
<     dup link-get-use-count      \ link-addr use-count
<     1+
<     swap link-set-use-count
< ;
< 
92c65,66
<     dup link-set-id
---
>     link-id over                \ data-val link-addr id addr
>     struct-set-id               \ data-val link-addr
96c70
<     1 over link-set-use-count   \ link-addr
---
>     1 over struct-set-use-count \ link-addr
100a75,81
>     \ Check argument.
>     dup is-not-allocated-link
>     if
>         ." .link: Arg is not an allocated link"
>         abort
>     then
> 
121c102
<     dup link-get-use-count      \ link-addr count
---
>     dup struct-get-use-count    \ link-addr count
134c115
<             link-dec-use-count
---
>             struct-dec-use-count
/home/earl/gforth-mma2/list.fs
5c5
< 19317 constant list-id
---
> 17971 constant list-id
27,41d26
< : list-get-id ( list -- id-value )
<     0w@
< ;
< 
< : list-set-id ( list -- )
<     list-id swap 0w!
< ;
< 
< : list-get-use-count ( list -- uc-value )
<     1w@
< ;
< 
< : list-set-use-count ( u-16 list -- )
<     1w!
< ;
68c53
<     list-get-id     \ Here the fetch could abort on an invalid address, like a random number.
---
>     struct-get-id   \ Here the fetch could abort on an invalid address, like a random number.
76,87d60
< : list-dec-use-count ( list-addr -- )
<     dup list-get-use-count      \ list-addr use-count
<     1-
<     swap list-set-use-count
< ;
< 
< : list-inc-use-count ( list-addr -- )
<     dup list-get-use-count      \ list-addr use-count
<     1+
<     swap list-set-use-count
< ;
< 
109c82,83
<     dup list-set-id             \ link-addr
---
>     list-id over                \ link-addr id link-addr
>     struct-set-id               \ link-addr
112c86
<     1 over list-set-use-count   \ link-addr
---
>     1 over struct-set-use-count \ link-addr
178c152
<         ." list-push: Argument is not an allocated list"
---
>         ." list-raw: Argument is not an allocated list"
202c176
<         ." list-push: Argument is not an allocated list"
---
>         ." .list: Argument is not an allocated list"
308d281
< 
437c410
<     dup list-get-use-count      \ list-addr count
---
>     dup struct-get-use-count    \ list-addr count
447c420
<             list-dec-use-count
---
>             struct-dec-use-count
/home/earl/gforth-mma2/mm_array.fs
/home/earl/gforth-mma2/name.fs
2c2
< 17971 constant name-id
---
> 19317 constant name-id
24,50d23
< : name-get-id ( name-addr -- id )
<     0w@
< ;
< 
< : name-set-id ( name-addr -- )
<     name-id swap 0w!
< ;
< 
< : name-get-use-count ( name-addr -- u-uc )
<     1w@
< ;
< 
< : name-set-use-count ( u-16 name-addr -- )
<     1w!
< ;
< 
< : name-dec-use-count ( name-addr -- )
<     dup name-get-use-count      \ name-addr use-count
<     1-
<     swap name-set-use-count
< ;
< 
< : name-inc-use-count ( name-addr -- )
<     dup name-get-use-count      \ name-addr use-count
<     1+
<     swap name-set-use-count
< ;
80c53
<     name-get-id \ Here the fetch could abort on an invalid address, like a random number.
---
>     struct-get-id   \ Here the fetch could abort on an invalid address, like a random number.
91,92c64,67
<     dup name-set-id             \ str-addr len name-addr
<     1 over name-set-use-count   \ str-addr len name-addr
---
>     name-id over                \ str-addr len name-addr id name-addr
>     struct-set-id               \ str-addr len name-addr
>     1 over                      \ str-addr len name-addr 1 addr
>     struct-set-use-count        \ str-addr len name-addr
122c97
<     dup name-get-use-count      \ name-addr count
---
>     dup struct-get-use-count    \ name-addr count
133c108
<             name-dec-use-count
---
>             struct-dec-use-count
/home/earl/gforth-mma2/namelist.fs
13c13
<     [ ' name-inc-use-count ] literal    \ name-list-result-addr xt
---
>     [ ' struct-inc-use-count ] literal  \ name-list-result-addr xt
21c21
<     [ ' name-inc-use-count ] literal    \ name-list-result-addr xt
---
>     [ ' struct-inc-use-count ] literal  \ name-list-result-addr xt
29c29
<     [ ' name-inc-use-count ] literal    \ name-list-result-addr xt
---
>     [ ' struct-inc-use-count ] literal  \ name-list-result-addr xt
/home/earl/gforth-mma2/numlist.fs
/home/earl/gforth-mma2/stack.fs
/home/earl/gforth-mma2/tools.fs
57a58,91
> \ Return the struct id from a struct instance.
> : struct-get-id ( addr -- u1 )
>     0w@               \ Fetch the ID. 
> ;
> 
> \ Set the struct id,
> : struct-set-id ( u addr -- )
>     0w!    \ Store the ID.
> ;
> 
> \ Get struct use count.
> : struct-get-use-count ( struct-addr -- u-uc )
>     1w@ 
> ;
> 
> \ Set struct use count.
> : struct-set-use-count ( u-16 struct-addr -- )
>     1w! 
> ;
> 
> \ Decrement struct use count.
> : struct-dec-use-count ( struct-addr -- )
>     dup struct-get-use-count      \ struct-addr use-count
>     1-  
>     swap struct-set-use-count
> ;
> 
> \ Increment struct use count.
> : struct-inc-use-count ( struct-addr -- )
>     dup struct-get-use-count      \ struct-addr use-count
>     1+                                                                                                                                               
>     swap struct-set-use-count
> ;
> 
