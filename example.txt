list1: (5, 1, 3, 5)

list2: (5, 5, 2, 1)

list3: (1, 5)   (intersection, no duplicates)

list4: (3, 1, 2, 5)   (union, no duplicates)

list5: (3)   (list1 - list2)

list6: (2)   (list2 - list1)

list7: (10, 2, 6, 10)   (list1 * 2)

list8: (4, 0, 2, 4)   (list1 + -1)

list-fp-1: (4.6 , 3.2 , 2.1 )

list-fp-2: (16.1 , 11.2 , 7.35 )   (list-fp-1 * 3.5)

list-fp-3: (6.1 , 4.7 , 3.6 )   (list-fp-1 + 1.5)

Memory Use:
  list-header-store Capacity: 15, Free: 4, In use: 11 
  link-store        Capacity: 60, Free: 27, In use: 33 
  num-store         Capacity: 30, Free: 6, In use: 24 
  fpn-store         Capacity: 30, Free: 21, In use: 9 

Deallocating ...

Memory Use:
  list-header-store Capacity: 15, Free: 15, In use: 0 
  link-store        Capacity: 60, Free: 60, In use: 0 
  num-store         Capacity: 30, Free: 30, In use: 0 
  fpn-store         Capacity: 30, Free: 30, In use: 0 

list-of-lists-fp-1: ((1.1 , 2.1 ), (4.1 , 5.1 ))   (Lets say these are Cartesian coordinates)

list-of-lists-fp-2: ((7.8 , 5.2 ), (10.8 , 8.2 ))   (Euclidean Translation using (6.7 , 3.1 ))

Memory Use:
  list-header-store Capacity: 15, Free: 8, In use: 7 
  link-store        Capacity: 60, Free: 46, In use: 14 
  num-store         Capacity: 30, Free: 30, In use: 0 
  fpn-store         Capacity: 30, Free: 20, In use: 10 

Deallocating  ...

Memory Use:
  list-header-store Capacity: 15, Free: 15, In use: 0 
  link-store        Capacity: 60, Free: 60, In use: 0 
  num-store         Capacity: 30, Free: 30, In use: 0 
  fpn-store         Capacity: 30, Free: 30, In use: 0 

